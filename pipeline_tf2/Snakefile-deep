import sys
import os

slide_path = config['slide_path']
output_path = config['output_path']
qc_ckpt = config['qc_ckpt']
fan_ckpt = config['fan_ckpt']
unet_ckpt = config['unet_ckpt']
dataset = config['dataset']
rescale_factor = config['rescale_factor']

fan_min_dict = {'MLL':0.,'Adden1':0.,'Adden2':0.}
fan_max_dict = {'MLL':1.,'Adden1':1.,'Adden2':1.}

fan_min = fan_min_dict[dataset]
fan_max = fan_max_dict[dataset]

slide_id = slide_path.split('/')[-1].split('.')[0]

try:
    os.makedirs(output_path)
except:
    pass

for folder in ['_quality_control',
               '_segmented_wbc','_segmented_rbc',
               '_aggregates_wbc','_aggregates_rbc',
               '_checkpoints']:
    try:
        os.makedirs(os.path.join(output_path,folder))
    except:
        pass

localrules: all, quality_control, segment_characterise_wbc_rbc, characterise_aggregate_wbc

rule all:
    input:
        "{}/_aggregates_rbc/{}.h5".format(output_path,slide_id),
        "{}/_aggregates_wbc/{}.h5".format(output_path,slide_id),
        "{}/_checkpoints/{}_agg_wbc".format(output_path,slide_id),
        "{}/_checkpoints/{}_agg_rbc".format(output_path,slide_id)

rule quality_control:
    input:
        slide_path=slide_path
    output:
        qc_out="{}/_quality_control/{}".format(output_path,slide_id),
        checkpoint_qc="{}/_checkpoints/{}_qc".format(output_path,slide_id)
    message:
        "Running slide through QC network."
    params:
        qc_ckpt=qc_ckpt
    shell:
        """
        python3 scripts/python/quality_control.py \
         --slide_path {input.slide_path}\
         --input_height 512\
         --input_width 512\
         --checkpoint_path {params.qc_ckpt}\
         --batch_size 32 > {output.qc_out} && touch {output.checkpoint_qc}
        """

rule segment_characterise_wbc_rbc:
    input:
        slide_path=slide_path,
        qc_out="{}/_quality_control/{}".format(output_path,slide_id),
        checkpoint_qc="{}/_checkpoints/{}_qc".format(output_path,slide_id)
    output:
        seg_rbc="{}/_segmented_rbc/{}.h5".format(output_path,slide_id),
        checkpoint_seg_rbc="{}/_checkpoints/{}_seg_rbc".format(output_path,slide_id)
        seg_wbc="{}/_segmented_wbc/{}.h5".format(output_path,slide_id),
        checkpoint_seg_wbc="{}/_checkpoints/{}_seg_wbc".format(output_path,slide_id)
    message:
        "Segmenting WBC and RBC."
    params:
        log_id="WBC_RBC_SEGMENTATION_{}".format(slide_id),
        n_cores=16,
        mem=16000,
        unet_ckpt=unet_ckpt,
        fan_ckpt=fan_ckpt,
        fan_min=fan_min,
        fan_max=fan_max,
        depth_mult=0.25,
        n_features=32,
        rescale_factor=rescale_factor
    shell:
        """
        python3 scripts/python/segment_slide_wbc_rbc.py \
            --csv_path {input.qc_out} \
            --slide_path {input.slide_path} \
            --fan_checkpoint_path {params.fan_ckpt} \
            --unet_checkpoint_path {params.unet_ckpt} \
            --wbc_output_path {output.seg_wbc} \
            --rbc_output_path {output.seg_rbc} \
            --depth_mult {params.depth_mult} \
            --n_features {params.n_features} \
            --fan_adjustment_min {params.fan_min} \
            --fan_adjustment_max {params.fan_max} \
            --rescale_factor {params.rescale_factor} && touch {output.checkpoint_seg_rbc}
        """

rule characterise_aggregate_rbc:
    input:
        seg_rbc="{}/_segmented_rbc/{}.h5".format(output_path,slide_id),
        checkpoint_seg_rbc="{}/_checkpoints/{}_seg_rbc".format(output_path,slide_id),
    output:
        agg_rbc="{}/_aggregates_rbc/{}.h5".format(output_path,slide_id),
        checkpoint_agg_rbc="{}/_checkpoints/{}_agg_rbc".format(output_path,slide_id)
    message:
        "Characterising and aggregating RBC."
    params:
        log_id="RBC_CHARACTERISATION_AGGREGATION_{}".format(slide_id),
        n_cores=2,
        mem=8000,
        rescale_factor=rescale_factor
    shell:
        """
        python3 scripts/python/characterise_cells.py \
            --segmented_cells_path {input.seg_rbc} \
            --cell_type rbc \
            --n_processes {params.n_cores} \
            --rescale_factor {params.rescale_factor} \
            --output_path {output.agg} && touch {output.checkpoint_agg_rbc}
        """

rule characterise_aggregate_wbc:
    input:
        seg_wbc="{}/_segmented_wbc/{}.h5".format(output_path,slide_id),
        checkpoint_seg_wbc="{}/_checkpoints/{}_seg_wbc".format(output_path,slide_id),
    output:
        agg_wbc="{}/_aggregates_wbc/{}.h5".format(output_path,slide_id),
        checkpoint_agg_wbc="{}/_checkpoints/{}_agg_wbc".format(output_path,slide_id)
    message:
        "Characterising and aggregating WBC."
    params:
        log_id="WBC_CHARACTERISATION_AGGREGATION_{}".format(slide_id),
        n_cores=2,
        mem=8000,
        rescale_factor=rescale_factor
    shell:
        """ 
        python3 scripts/python/characterise_cells.py \
            --segmented_cells_path {input.seg_wbc} \
            --cell_type wbc \
            --wbc_method deep \
            --n_processes {params.n_cores} \
            --rescale_factor {params.rescale_factor} \
            --output_path {output.agg} && touch {output.checkpoint_agg_wbc}
        """
