import sys
import os

slide_path = config['slide_path']
output_path = config['output_path']
unet_ckpt = config['unet_ckpt']
qc_ckpt = config['qc_ckpt']
rescale_factor = config['rescale_factor']

slide_id = slide_path.split('/')[-1].split('.')[0]

try:
    os.makedirs(output_path)
except:
    pass

for folder in ['_quality_control',
               '_segmented_wbc','_segmented_rbc',
               '_aggregates_wbc','_aggregates_rbc',
               '_checkpoints']:
    try:
        os.makedirs(os.path.join(output_path,folder))
    except:
        pass

#localrules: all, quality_control, segment_characterise_wbc
#localrules: all, quality_control, segment_characterise_wbc, aggregate_wbc
localrules: all, quality_control, segment_characterise_wbc, aggregate_wbc, segment_characterise_rbc, aggregate_rbc

rule all:
    input:
        "{}/_aggregates_rbc/{}.h5".format(output_path,slide_id),
        "{}/_aggregates_wbc/{}.h5".format(output_path,slide_id),
        "{}/_checkpoints/{}_agg_wbc".format(output_path,slide_id),
        "{}/_checkpoints/{}_agg_rbc".format(output_path,slide_id)

rule quality_control:
    input:
        slide_path=slide_path
    output:
        qc_out="{}/_quality_control/{}".format(output_path,slide_id),
        checkpoint_qc="{}/_checkpoints/{}_qc".format(output_path,slide_id)
    message:
        "Running slide through QC network."
    params:
        qc_ckpt=qc_ckpt
    shell:
        """
        sh scripts/bash/quality_checking.sh\
         {input.slide_path} {params.qc_ckpt} > {output.qc_out} && touch {output.checkpoint_qc}
        """

rule segment_characterise_rbc:
    input:
        slide_path=slide_path,
        qc_out="{}/_quality_control/{}".format(output_path,slide_id),
        checkpoint_qc="{}/_checkpoints/{}_qc".format(output_path,slide_id)
    output:
        seg="{}/_segmented_rbc/{}.h5".format(output_path,slide_id),
        checkpoint_seg_rbc="{}/_checkpoints/{}_seg_rbc".format(output_path,slide_id)
    message:
        "Segmenting RBC."
    params:
        log_id="RBC_SEGMENTATION_{}".format(slide_id),
        n_cores=16,
        mem=16000,
        rescale_factor=rescale_factor
    shell:
        """
        python3 scripts/python/segment_slide_rbc.py \
            --csv_path {input.qc_out} \
            --slide_path {input.slide_path} \
            --output_path {output.seg} \
            --n_processes_analysis 4 \
            --n_processes_data 2 \
            --rescale_factor {params.rescale_factor} && touch {output.checkpoint_seg_rbc}
        """

rule segment_characterise_wbc:
    input:
        slide_path=slide_path,
        qc_out="{}/_quality_control/{}".format(output_path,slide_id),
        checkpoint_qc="{}/_checkpoints/{}_qc".format(output_path,slide_id)
    output:
        seg="{}/_segmented_wbc/{}.h5".format(output_path,slide_id),
        checkpoint_seg_wbc="{}/_checkpoints/{}_seg_wbc".format(output_path,slide_id)
    params:
        unet_ckpt=unet_ckpt,
        rescale_factor=rescale_factor
    message:
        "Segmenting WBC."
    shell:
        """
        python3 scripts/python/segment_slide_wbc.py \
            --csv_path {input.qc_out} \
            --slide_path {input.slide_path} \
            --checkpoint_path {params.unet_ckpt} \
            --depth 0.25 \
            --output_path {output.seg} \
            --n_processes_data 8 \
            --rescale_factor {params.rescale_factor} && touch {output.checkpoint_seg_wbc}
        """

rule aggregate_rbc:
    input:
        seg="{}/_segmented_rbc/{}.h5".format(output_path,slide_id),
        checkpoint_seg_rbc="{}/_checkpoints/{}_seg_rbc".format(output_path,slide_id),
    output:
        agg="{}/_aggregates_rbc/{}.h5".format(output_path,slide_id),
        checkpoint_agg_rbc="{}/_checkpoints/{}_agg_rbc".format(output_path,slide_id)
    message:
        "Aggregating RBC."
    params:
        log_id="RBC_AGGREGATION_{}".format(slide_id),
        n_cores=2,
        mem=8000
    shell:
        """
        python3 scripts/python/aggregate_hdf5.py \
            --hdf5_path {input.seg}\
            --output_path {output.agg} && touch {output.checkpoint_agg_rbc}
        """

rule aggregate_wbc:
    input:
        segmentation="{}/_segmented_wbc/{}.h5".format(output_path,slide_id),
        slide=slide_path,
        checkpoint_seg_wbc="{}/_checkpoints/{}_seg_wbc".format(output_path,slide_id),
    output:
        agg="{}/_aggregates_wbc/{}.h5".format(output_path,slide_id),
        checkpoint_agg_wbc="{}/_checkpoints/{}_agg_wbc".format(output_path,slide_id)
    message:
        "Aggregating WBC."
    params:
        log_id="WBC_AGGREGATION_{}".format(slide_id),
        n_cores=2,
        mem=8000,
        rescale_factor=rescale_factor
    shell:
        """
        python3 scripts/python/aggregate_hdf5_with_nucleus.py \
            --slide_path {input.slide} \
            --hdf5_path {input.segmentation}\
            --output_path {output.agg} \
            --rescale_factor {params.rescale_factor} && touch {output.checkpoint_agg_wbc}
        """
