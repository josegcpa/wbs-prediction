import os
from glob import glob

size_wbc=128
size_rbc=64
N=125
best_model_path=config['best_model_path']
slide_folder=config['slide_folder']
slide_output_path=config['slide_output_path']
extension=config['extension']
type=config['type']
rbc_subset_file=config['rbc_subset_file']
wbc_subset_file=config['wbc_subset_file']
dataset_id=config['dataset_id']
use_labels=config['use_labels']

if 'subset' in type:
    subset_flag_rbc="--feature_subset " + rbc_subset_file
    subset_flag_wbc="--feature_subset " + wbc_subset_file

else:
    subset_flag_rbc=""
    subset_flag_wbc=""

folders = ['cell-collections','cell-proportions','ev-scores',
           'cell-collections/'+dataset_id,'cell-proportions/'+dataset_id]

for folder in folders:
    try: os.makedirs(folder)
    except: pass

model_combinations = {}
with open(best_model_path,'r') as o:
    for line in o:
        line = line.strip().split(',')
        model_path,fold_idx,label_path = line
        if use_labels == 'yes':
            all_slides = []
            for x in open(label_path,'r').readlines()[1:]:
                x = x.strip().split(',')[0]
                slide_path=os.path.join(slide_folder,x)+'.'+extension
                if os.path.exists(slide_path):
                    all_slides.append(x)
        else:
            all_slides = glob(os.path.join(slide_folder,'*')+'.'+extension)
            all_slides = [
                x.split(os.sep)[-1].strip('.'+extension) for x in all_slides]

        model_path = os.path.split(model_path)[-1]
        model_combinations[model_path] = [model_path,fold_idx,all_slides]
        try:
            os.makedirs(os.path.join('cell-collections',dataset_id,model_path))
        except:
            pass

rule all:
    input:
        expand("cell-collections/" + dataset_id + "/wbc_{model_id}.h5",
               model_id=model_combinations.keys()),
        expand("cell-collections/" + dataset_id + "/rbc_{model_id}.h5",
               model_id=model_combinations.keys()),
        expand("cell-proportions/" + dataset_id + "/{model_id}.csv",
               model_id=model_combinations.keys()),

rule get_proportions:
    input:
        [expand(
            'cell-collections/' + dataset_id + '/{model_id}/rbc-{slide_id}.h5',model_id=mp,
            slide_id=model_combinations[mp][2])
         for mp in model_combinations],
         [expand(
            'cell-collections/' + dataset_id + '/{model_id}/wbc-{slide_id}.h5',model_id=mp,
            slide_id=model_combinations[mp][2])
         for mp in model_combinations]

    output:
        csv='cell-proportions/' + dataset_id + '/{model_id}.csv'

    params:
        fold_idx=lambda wcs: model_combinations[wcs.model_id][1],
        collection_path='cell-collections/' + dataset_id + '/{model_id}',
        other_dataset_flag=lambda wcs: "--other_dataset_path datasets/blood_counts_no_header.csv" if '.bc' in wcs.model_id else ""

    shell:
        """
        python3 scripts/compile_cell_proportions.py\
            --collection_path {params.collection_path} > {output.csv}
        """

rule compile_rbc_collections:
    input:
        [expand(
            'cell-collections/' + dataset_id + '/{model_id}/rbc-{slide_id}.h5',
            model_id=mp,slide_id=model_combinations[mp][2])
         for mp in model_combinations]

    output:
        "cell-collections/" + dataset_id + "/rbc_{model_id}.h5"

    params:
        N=N,
        collection_path='cell-collections/' + dataset_id + '/{model_id}'

    shell:
        """
        python3 scripts/compile_cell_collections.py\
            --collection_path {params.collection_path} --pattern "rbc*h5"\
            --output_path {output} --n {params.N}
        """

rule compile_wbc_collections:
    input:
        [expand(
            'cell-collections/' + dataset_id + '/{model_id}/wbc-{slide_id}.h5',
            model_id=mp,slide_id=model_combinations[mp][2])
         for mp in model_combinations]

    output:
        "cell-collections/" + dataset_id + "/wbc_{model_id}.h5"

    params:
        N=N,
        collection_path='cell-collections/' + dataset_id + '/{model_id}'

    shell:
        """
        python3 scripts/compile_cell_collections.py\
            --collection_path {params.collection_path} --pattern "wbc*h5"\
            --output_path {output} --n {params.N}
        """

rule retrieve_rbc:
    input:
        slide_path=slide_folder+'/{slide_id}.'+extension,
        aggregates_path=os.path.join(slide_output_path,'_aggregates_rbc','{slide_id}.h5'),
        segmented_path=os.path.join(slide_output_path,'_segmented_rbc','{slide_id}.h5'),
        model_path='models/{model_id}'

    output:
        'cell-collections/' + dataset_id + '/{model_id}/rbc-{slide_id}.h5'

    params:
        N=N,
        fold_idx=lambda wcs: model_combinations[wcs.model_id][1],
        subset_flag=subset_flag_rbc,
        size=size_rbc

    shell:
        """
        python3 scripts/get_cells_complete.py \
            --network_idx 1 \
            --slide_path {input.slide_path} \
            --aggregates_path {input.aggregates_path} \
            --segmented_path {input.segmented_path} \
            --model_path {input.model_path} \
            --output_path {output} \
            --fold {params.fold_idx} \
            --subset {params.N} {params.subset_flag} \
            --size {params.size} {params.subset_flag}
        """

rule retrieve_wbc:
    input:
        slide_path=os.path.join(slide_folder,'{slide_id}.'+extension),
        aggregates_path=os.path.join(slide_output_path,'_aggregates_wbc','{slide_id}.h5'),
        segmented_path=os.path.join(slide_output_path,'_segmented_wbc','{slide_id}.h5'),
        model_path='models/{model_id}'

    output:
        'cell-collections/' + dataset_id + '/{model_id}/wbc-{slide_id}.h5'

    params:
        N=N,
        fold_idx=lambda wcs: model_combinations[wcs.model_id][1],
        subset_flag=subset_flag_wbc,
        size=size_wbc

    shell:
        """
        python3 scripts/get_cells_complete.py \
            --network_idx 0 \
            --slide_path {input.slide_path} \
            --aggregates_path {input.aggregates_path} \
            --segmented_path {input.segmented_path} \
            --model_path {input.model_path} \
            --output_path {output} \
            --fold {params.fold_idx} \
            --subset {params.N} \
            --size {params.size} {params.subset_flag}
        """

